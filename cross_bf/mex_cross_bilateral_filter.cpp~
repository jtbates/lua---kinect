#include "mex.h"

#include <math.h>

// #include <algorithm>
// #include <sstream>

// DELETE THESE!
#include <fstream>
#include <iostream>

// #define CHRONO
// #include "geom.h"


#define NO_XML // This needs to go before fast_lbf.h
#include "fast_lbf.h"
#include "cbf_util.h"

#define ARG_IMG_DEPTH 0
#define ARG_IMG_EDGE 1
#define ARG_IMG_MASK 2
#define ARG_SPACE_SIGMA 3
#define ARG_RANGE_SIGMA 4
#define ARG_NUMSCALES 5

using namespace std;

typedef Array_2D<double> image_type;

void DoubleToImageType(image_type* image, unsigned char* img_depth,
        int height, int width, int ss) {
  
  int multiple = static_cast<int>(pow((float)2, ss));

  int downHeight = static_cast<int>(height / pow((float)2, ss));
  int downWidth = static_cast<int>(width / pow((float)2, ss));
  
  int cnt = 0;
  
  for (int x = 0; x < downWidth; ++x) {
    for (int y = 0; y < downHeight; ++y) {
      image->at(x, y) = *img_depth/255.0;
      
      img_depth += multiple;
      cnt += multiple;
      
      if (cnt > height) {
        img_depth += height * (multiple-1);
        cnt = 0;
      }
    }
  }
}

// void ImageTypeToDouble(image_type* image, unsigned char* img,
//         int height, int width) {
//   
//   
// }


// Args:
//   imgDepth - 2 dimensional depth image.
//   imgEdges - 2 dimensional edge image.
//   imgMask - 2D mask image (binary)
//   spaceSigma
//   rangeSigma
//   numScales - the number of scales at which to operate.
void mexFunction(int nlhs, mxArray* plhs[], const int nrhs, const mxArray* prhs[]) {
  if (nrhs != 6) {
    mexErrMsgTxt("Wrong number of arguments! 6 Required.");
  }
  
  // *****************************************************
  // Convert the Depth image to the required 'image_type'.
  // *****************************************************
  mxClassID img_depth_class_id = mxGetClassID(prhs[ARG_IMG_DEPTH]);
  if (img_depth_class_id != mxUINT8_CLASS) {
    mexErrMsgTxt("imgDepth must be UINT8");
  }
  
  const mwSize img_depth_num_dims = mxGetNumberOfDimensions(prhs[ARG_IMG_DEPTH]);
  if (img_depth_num_dims != 2) {
    mexErrMsgTxt("imgDepth must be 2-dimensional.");
  }
  
  const mwSize* img_depth_dims = mxGetDimensions(prhs[ARG_IMG_DEPTH]);
  
  int height = mxGetM(prhs[ARG_IMG_DEPTH]);
  int width = mxGetN(prhs[ARG_IMG_DEPTH]);

  unsigned char* img_depth = (unsigned char*) mxGetData(prhs[ARG_IMG_DEPTH]);
  
//   image_type image(width, height);
//   
//   for (int ww = 0; ww < width; ++ww) {
//     for (int hh = 0; hh < height; ++hh, ++img_depth) {
//       image(ww, hh) = static_cast<double>(*img_depth) / 255.0;
//     }
//   }
  
  // ****************************************************
  // Convert the Edge image to the required 'image_type'.
  // ****************************************************
  mxClassID img_edge_class_id = mxGetClassID(prhs[ARG_IMG_EDGE]);
  if (img_edge_class_id != mxUINT8_CLASS) {
    mexErrMsgTxt("imgEdge must be UINT8");
  }
  
  const mwSize img_edge_num_dims = mxGetNumberOfDimensions(prhs[ARG_IMG_EDGE]);
  if (img_edge_num_dims != 2) {
    mexErrMsgTxt("imgEdge must be 2-dimensional.");
  }
  
  const mwSize* img_edge_dims = mxGetDimensions(prhs[ARG_IMG_EDGE]);
  
  if (mxGetM(prhs[ARG_IMG_EDGE]) != height) {
    mexErrMsgTxt("Edge image is of the wrong height");
  }
  
  if (mxGetN(prhs[ARG_IMG_EDGE]) != width) {
    mexErrMsgTxt("Edge image is of the wrong width");
  }
  
  unsigned char* img_edge = (unsigned char*) mxGetData(prhs[ARG_IMG_EDGE]);
  
   
  
  
//   image_type edge(width, height);
//   
//   for (int ww = 0; ww < width; ++ww) {
//     for (int hh = 0; hh < height; ++hh, ++img_edge) {
//       edge(ww, hh) = static_cast<double>(*img_edge) / 255.0;
//     }
//   }
  
  
  
  // ****************************************************
  // Convert the Mask image to the required 'image_type'.
  // ****************************************************
  mxClassID img_mask_class_id = mxGetClassID(prhs[ARG_IMG_MASK]);
  if (img_mask_class_id != mxLOGICAL_CLASS) {
    mexErrMsgTxt("imgMask must be mxLOGICAL_CLASS");
  }
  
  const mwSize img_mask_num_dims = mxGetNumberOfDimensions(prhs[ARG_IMG_MASK]);
  if (img_mask_num_dims != 2) {
    mexErrMsgTxt("imgMask must be 2-dimensional.");
  }
  
  const mwSize* img_mask_dims = mxGetDimensions(prhs[ARG_IMG_MASK]);
  
  if (mxGetM(prhs[ARG_IMG_MASK]) != height) {
    mexErrMsgTxt("Mask image is of the wrong height");
  }
  
  if (mxGetN(prhs[ARG_IMG_MASK]) != width) {
    mexErrMsgTxt("Mask image is of the wrong width");
  }
  
  bool* img_mask = (bool*) mxGetData(prhs[ARG_IMG_MASK]);
  
  // **************************
  // Grab the range parameters.
  // **************************
  double sigma_s = mxGetScalar(prhs[ARG_SPACE_SIGMA]);
  double sigma_r = mxGetScalar(prhs[ARG_RANGE_SIGMA]);
  unsigned int num_scales = (unsigned int) mxGetScalar(prhs[ARG_NUMSCALES]);
  
  // ******************
  // Create the Pyramid
  // ******************
//   for (int ss = num_scales; ss > 0; --ss) {
int  ss = 2;  
  
    
    // Create the downsampled depth.
    int downHeight = static_cast<int>(height / pow((float)2, ss));
    int downWidth = static_cast<int>(width / pow((float)2, ss));

    mexPrintf("DownHeight: %d, %d\n", downHeight, downWidth);
    image_type image(downWidth, downHeight);
    DoubleToImageType(&image, img_depth, height, width, ss);
    
    image_type edge(downWidth, downHeight);
    DoubleToImageType(&edge, img_edge, height, width, ss);
    
    image_type filtered_image(downWidth, downHeight);

    Image_filter::fast_LBF(image, edge, sigma_s, sigma_r, false,
            &filtered_image, &filtered_image);
    
    // Now upsample the image.
    image_type img_updepth(width, height);
    upsample(&filtered_image, &img_updepth);
    
    // 
    
    // Now that we've filtered the image, replace the original non-noisy
    // pixels with the good pixels.
    ReplaceGoodPixels(image_type* src, image_type* dst, bool* mask, int height, int width) {
//   }
  
//   const int img_depth_dims2[] = {height, width};
  plhs[0] = mxCreateNumericArray(img_depth_num_dims, &img_depth_dims[0], mxUINT8_CLASS, mxREAL);
  unsigned char* output = (unsigned char*) mxGetData(plhs[0]);
  CopyInto(&img_updepth, output);
}
